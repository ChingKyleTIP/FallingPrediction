# -*- coding: utf-8 -*-
"""copy-of-final_exam-group-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/ChingKyleTIP/1884a7e041d73dab4c4990b20146b482/copy-of-final_exam-group-2.ipynb

Group 2 Final Exam <br>


Submitted By: <br>
Cantarona Zyrelle Jane, Canete John Carlo <br>
Capena Symon Renzo, Ching Kyle Jarick <br>
Conde Jethro Hans <br>

Submitted to: <br>
ENGR. Jonathan Taylar
"""

!pip install kaleido
!pip install cohere
!pip install tiktoken
!pip install spacy==3.6.0
!pip install tensorflow-probability<4.6.0
!pip install -r requirements.txt --use-deprecated=legacy-resolver

!pip install gradio

from google.colab import drive
drive.mount('/content/drive')

import gradio as gr

import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.callbacks import ModelCheckpoint
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.models import load_model

!pip install -q streamlit

import streamlit as st
import tensorflow as tf

data = '/content/drive/MyDrive/CPE 019 Final Exam/Fallimages'


img_size = (224, 224)
batch_size = 32

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_generator = datagen.flow_from_directory(data, target_size=img_size, batch_size=batch_size, subset='training')
val_generator = datagen.flow_from_directory(data, target_size=img_size, batch_size=batch_size, subset='validation')

lb = LabelBinarizer()
lb.fit(train_generator.classes)
num_classes = train_generator.num_classes

img_size = (224, 224)
batch_size = 32

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    vertical_flip=True)
train_generator = datagen.flow_from_directory(
    data,
    target_size=img_size,
    batch_size=batch_size,
    subset='training')
val_generator = datagen.flow_from_directory(
    data,
    target_size=img_size,
    batch_size=batch_size,
    subset='validation')

num_epochs = 50

learning_rate = 0.01

model = Sequential()
model.add(Flatten(input_shape=train_generator.image_shape))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.8))
model.add(Dense(num_classes, activation='softmax'))

optimizer = Adam(lr=learning_rate)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

model_path = '/content/drive/MyDrive/CPE 019 Final Exam/Copy of best_model.h5'

checkpoint = ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')

history = model.fit(train_generator, epochs=num_epochs, validation_data=val_generator, callbacks=[checkpoint])

model = load_model(model_path)

data = '/content/drive/MyDrive/CPE 019 Final Exam/fall_dataset'


img_size = (224, 224)
batch_size = 32

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_generator = datagen.flow_from_directory(data, target_size=img_size, batch_size=batch_size, subset='training')
val_generator = datagen.flow_from_directory(data, target_size=img_size, batch_size=batch_size, subset='validation')

lb = LabelBinarizer()
lb.fit(train_generator.classes)
num_classes = train_generator.num_classes

@st.cache(allow_output_mutation=True)
def model_path():
  model=tf.keras.models.load_model('/content/drive/MyDrive/CPE 019 Final Exam/Copy of best_model.h5')
  return model
st.write("""
# Fall Detection System"""
)
file=st.file_uploader("Choose a posture photo from computer",type=["jpg","png"])

import cv2
from PIL import Image,ImageOps
import numpy as np
def import_and_predict(image_data,model):
    size=(64,64)
    image=ImageOps.fit(image_data,size,Image.ANTIALIAS)
    img=np.asarray(image)
    img_reshape=img[np.newaxis,...]
    prediction=model.predict(img_reshape)
    return prediction
if file is None:
    st.text("Please upload an image file")
else:
    image=Image.open(file)
    st.image(image,use_column_width=True)
    prediction=import_and_predict(image,model)
    class_names=['Normal', 'Fall Warning', 'Fall']
    predicted_class = class_names[np.argmax(predictions)]
    probability = np.max(predictions)
    print(f'Predicted class: {predicted_class}')
    print(f'Probability: {probability}')